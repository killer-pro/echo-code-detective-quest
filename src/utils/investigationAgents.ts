
import { geminiAPI } from '../api/gemini';
import { Character, Investigation, Clue } from '../types';

interface AgentContext {
  investigation: Partial<Investigation>;
  characters: Character[];
  clues: Clue[];
  dialogHistory: Array<{
    character_id: string;
    user_input: string;
    character_reply: string;
    timestamp: string;
  }>;
}

class InvestigationAgents {
  private async retryWithBackoff<T>(
    operation: () => Promise<T>,
    maxRetries: number = 3,
    baseDelay: number = 1000
  ): Promise<T> {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        return await operation();
      } catch (error) {
        if (attempt === maxRetries) throw error;
        
        console.warn(`üîÑ Tentative ${attempt} √©chou√©e, retry dans ${baseDelay * attempt}ms`);
        await new Promise(resolve => setTimeout(resolve, baseDelay * attempt));
      }
    }
    throw new Error('Max retries exceeded');
  }

  async generateInvestigationWithAgents(prompt: string): Promise<Investigation> {
    console.log('ü§ñ D√©marrage g√©n√©ration par agents...');
    
    // Agent 1: Cr√©ation de l'histoire de base
    const baseStory = await this.retryWithBackoff(async () => {
      return await geminiAPI.generateInvestigation(`
        Cr√©ez une histoire d'enqu√™te bas√©e sur: "${prompt}"
        
        R√©pondez UNIQUEMENT en JSON:
        {
          "title": "Titre de l'enqu√™te",
          "description": "Description d√©taill√©e du myst√®re",
          "context": "Contexte narratif initial",
          "background_prompt": "2D game background, description de la sc√®ne principale, cartoon style, flat design"
        }
      `);
    });

    // Agent 2: Cr√©ation des personnages avec coh√©rence
    const characters = await this.retryWithBackoff(async () => {
      return await this.generateCoherentCharacters(baseStory, prompt);
    });

    // Agent 3: G√©n√©ration des indices coh√©rents
    const clues = await this.retryWithBackoff(async () => {
      return await this.generateCoherentClues(baseStory, characters);
    });

    // Agent 4: Attribution du coupable
    const updatedCharacters = await this.retryWithBackoff(async () => {
      return await this.assignCulprit(characters, baseStory);
    });

    return {
      ...baseStory,
      characters: updatedCharacters,
      clues,
      status: 'en_cours'
    } as Investigation;
  }

  private async generateCoherentCharacters(baseStory: any, originalPrompt: string): Promise<Character[]> {
    const response = await geminiAPI.generateInvestigation(`
      Bas√© sur cette histoire: "${baseStory.description}"
      
      Cr√©ez 3-5 personnages COH√âRENTS avec des relations entre eux.
      
      R√©pondez UNIQUEMENT en JSON:
      {
        "characters": [
          {
            "name": "Nom",
            "role": "t√©moin|suspect|innocent",
            "personality": {
              "traits": ["trait1", "trait2"],
              "secrets": "secrets du personnage",
              "relationships": "relations avec les autres personnages",
              "alibi": "o√π √©tait-il au moment de l'incident",
              "knowledge_level": "ce qu'il sait vraiment"
            },
            "knowledge": "Connaissances du personnage sur l'enqu√™te",
            "position": {"x": 200, "y": 150},
            "reputation_score": 50,
            "location_description": "O√π se trouve ce personnage",
            "portrait_prompt": "2D character sprite, description physique d√©taill√©e, cartoon style",
            "dialog_background_prompt": "2D game background, lieu du personnage, cartoon style"
          }
        ]
      }
    `);
    
    return response.characters || [];
  }

  private async generateCoherentClues(baseStory: any, characters: Character[]): Promise<Clue[]> {
    const charactersInfo = characters.map(c => `${c.name}: ${c.personality.secrets || 'Pas de secrets'}`).join('\n');
    
    const response = await geminiAPI.generateInvestigation(`
      Histoire: "${baseStory.description}"
      Personnages: ${charactersInfo}
      
      Cr√©ez 2-4 indices COH√âRENTS qui permettront de r√©soudre l'enqu√™te.
      
      R√©pondez UNIQUEMENT en JSON:
      {
        "clues": [
          {
            "name": "Nom de l'indice",
            "description": "Description et importance de l'indice",
            "location": "O√π trouve-t-on cet indice",
            "related_character": "Personnage li√© √† cet indice",
            "image_prompt": "2D game object, description de l'objet, cartoon style"
          }
        ]
      }
    `);
    
    return response.clues || [];
  }

  private async assignCulprit(characters: Character[], baseStory: any): Promise<Character[]> {
    const response = await geminiAPI.generateInvestigation(`
      Histoire: "${baseStory.description}"
      Personnages: ${characters.map(c => `${c.name} (${c.role}): ${c.knowledge}`).join('\n')}
      
      D√©signez qui est le VRAI coupable et pourquoi. Le coupable doit √™tre logique par rapport √† l'histoire.
      
      R√©pondez UNIQUEMENT en JSON:
      {
        "culprit_name": "Nom du coupable",
        "motive": "Motif du crime",
        "method": "Comment le crime a √©t√© commis"
      }
    `);
    
    return characters.map(char => ({
      ...char,
      is_culprit: char.name === response.culprit_name
    }));
  }

  async generateContextualResponse(
    character: Character,
    userMessage: string,
    context: AgentContext
  ): Promise<any> {
    // Construire le contexte global
    const globalContext = this.buildGlobalContext(context, character.id);
    
    const prompt = `
      Tu es ${character.name}, ${character.role} dans une enqu√™te.
      
      CONTEXTE GLOBAL DE L'ENQU√äTE:
      ${globalContext}
      
      TA PERSONNALIT√â:
      ${JSON.stringify(character.personality)}
      
      TES CONNAISSANCES:
      ${character.knowledge}
      
      HISTORIQUE DE TES CONVERSATIONS:
      ${context.dialogHistory
        .filter(d => d.character_id === character.id)
        .slice(-3)
        .map(d => `Enqu√™teur: ${d.user_input}\nToi: ${d.character_reply}`)
        .join('\n\n')}
      
      L'enqu√™teur te dit: "${userMessage}"
      
      R√àGLES IMPORTANTES:
      1. Reste coh√©rent avec ce que les autres personnages ont dit
      2. Si quelqu'un pr√©tend t'avoir vu quelque part, confirme ou contredis selon la v√©rit√©
      3. Tes r√©ponses doivent √™tre logiques par rapport au contexte global
      4. Si tu es le coupable, sois subtil mais laisse des indices
      
      R√©ponds en JSON:
      {
        "text": "Ta r√©ponse en tant que ${character.name}",
        "keywords": ["mot-cl√©1", "mot-cl√©2"],
        "reputationImpact": 0,
        "truthLikelihood": 0.5,
        "internal_thoughts": "Tes pens√©es internes (non visible par l'enqu√™teur)"
      }
    `;

    return await this.retryWithBackoff(async () => {
      const response = await geminiAPI.generateCharacterResponse(
        character.name,
        character.role,
        character.personality,
        character.knowledge,
        50, // reputation par d√©faut
        userMessage,
        [] // l'historique est d√©j√† dans le prompt
      );
      
      // Ajouter le prompt complet pour debug
      return {
        ...response,
        _debugPrompt: prompt
      };
    });
  }

  private buildGlobalContext(context: AgentContext, currentCharacterId: string): string {
    let globalContext = `ENQU√äTE: ${context.investigation.title}\n`;
    globalContext += `DESCRIPTION: ${context.investigation.description}\n\n`;
    
    globalContext += "PERSONNAGES DE L'ENQU√äTE:\n";
    context.characters.forEach(char => {
      globalContext += `- ${char.name} (${char.role}): ${char.location_description}\n`;
      if (char.personality.alibi) {
        globalContext += `  Alibi: ${char.personality.alibi}\n`;
      }
    });
    
    globalContext += "\nCONVERSATIONS IMPORTANTES ENTRE PERSONNAGES:\n";
    const relevantDialogs = context.dialogHistory
      .filter(d => d.character_id !== currentCharacterId)
      .slice(-10) // Derni√®res 10 conversations des autres
      .map(d => {
        const charName = context.characters.find(c => c.id === d.character_id)?.name || 'Inconnu';
        return `${charName} a dit: "${d.character_reply}"`;
      });
    
    globalContext += relevantDialogs.join('\n');
    
    if (context.clues.length > 0) {
      globalContext += "\n\nINDICES D√âCOUVERTS:\n";
      context.clues.forEach(clue => {
        globalContext += `- ${clue.name}: ${clue.description}\n`;
      });
    }
    
    return globalContext;
  }
}

export const investigationAgents = new InvestigationAgents();
