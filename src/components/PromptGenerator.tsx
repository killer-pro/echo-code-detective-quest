import React, { useState } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Loader2, Sparkles, Users, MapPin, Search, Zap } from 'lucide-react';
import { toast } from 'sonner';
import { v4 as uuidv4 } from 'uuid';
import { supabase } from '../integrations/supabase/client';
import { Investigation } from '../types';
import { investigationAgents } from '../utils/investigationAgents';
import { cloudinaryService } from '../utils/cloudinaryService';

interface PromptGeneratorProps {
  onInvestigationGenerated: (investigation: Investigation) => void;
}

const PromptGenerator: React.FC<PromptGeneratorProps> = ({ onInvestigationGenerated }) => {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationStep, setGenerationStep] = useState('');

  const quickPrompts = [
    "Un vol de bijoux dans un manoir isol√©",
    "Un meurtre myst√©rieux lors d'une soir√©e de gala",
    "La disparition d'un scientifique renomm√©",
    "Une affaire de chantage dans un bureau d'avocats",
    "Un complot politique au sein d'une petite ville"
  ];

  const handleQuickPrompt = (quickPrompt: string) => {
    setPrompt(quickPrompt);
  };

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      toast.error('Veuillez entrer une description pour votre enqu√™te');
      return;
    }

    setIsGenerating(true);
    setGenerationStep('G√©n√©ration de l\'histoire...');

    try {
      console.log('üé¨ D√©marrage g√©n√©ration avec agents...');
      
      // G√©n√©ration avec le syst√®me d'agents
      setGenerationStep('Cr√©ation des personnages...');
      const investigationData = await investigationAgents.generateInvestigationWithAgents(prompt);
      
      console.log('‚úÖ Investigation g√©n√©r√©e:', investigationData);

      // Sauvegarde en base de donn√©es
      setGenerationStep('Sauvegarde de l\'enqu√™te...');
      const investigationId = uuidv4();
      
      const { error: investigationError } = await supabase
        .from('investigations')
        .insert({
          id: investigationId,
          title: investigationData.title,
          prompt: prompt,
          background_url: '', // Sera mis √† jour apr√®s g√©n√©ration
          status: 'en_cours',
          player_role: 'enqu√™teur'
        });

      if (investigationError) {
        console.error('üí• Erreur sauvegarde investigation:', investigationError);
        throw investigationError;
      }

      // G√©n√©ration et sauvegarde des assets avec retry
      setGenerationStep('G√©n√©ration des images...');
      
      // G√©n√©rer le background
      let backgroundUrl = '';
      try {
        const backgroundResponse = await cloudinaryService.generateAndUploadImage(
          investigationData.background_prompt || '2D game background, mysterious scene, cartoon style',
          `${investigationId}/background`
        );
        backgroundUrl = backgroundResponse.url;
      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur g√©n√©ration background, utilisation fallback');
        backgroundUrl = 'https://via.placeholder.com/800x600/1a1a1a/ffffff?text=Background';
      }

      // Sauvegarder les personnages avec retry pour les images
      const savedCharacters = [];
      for (const character of investigationData.characters) {
        setGenerationStep(`G√©n√©ration image ${character.name}...`);
        
        let portraitUrl = '';
        let dialogBackgroundUrl = '';
        
        try {
          // Portrait avec retry
          const portraitResponse = await cloudinaryService.generateAndUploadImage(
            character.portrait_prompt || `2D character sprite, ${character.name}, cartoon style`,
            `${investigationId}/characters/${character.name}_portrait`
          );
          portraitUrl = portraitResponse.url;
          
          // Background de dialogue avec retry
          const dialogBgResponse = await cloudinaryService.generateAndUploadImage(
            character.dialog_background_prompt || `2D game background, ${character.location_description}, cartoon style`,
            `${investigationId}/characters/${character.name}_dialog_bg`
          );
          dialogBackgroundUrl = dialogBgResponse.url;
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur g√©n√©ration images pour ${character.name}, utilisation fallback`);
          portraitUrl = `https://via.placeholder.com/200x200/4f46e5/ffffff?text=${character.name}`;
          dialogBackgroundUrl = `https://via.placeholder.com/800x600/1a1a1a/ffffff?text=${character.location_description}`;
        }

        const { data: savedCharacter, error: characterError } = await supabase
          .from('characters')
          .insert({
            ...character,
            investigation_id: investigationId,
            image_url: portraitUrl,
            dialog_background_url: dialogBackgroundUrl
          })
          .select()
          .single();

        if (characterError) {
          console.error(`üí• Erreur sauvegarde personnage ${character.name}:`, characterError);
          throw characterError;
        }

        savedCharacters.push(savedCharacter);
      }

      // Sauvegarder les indices
      const savedClues = [];
      for (const clue of investigationData.clues) {
        const { data: savedClue, error: clueError } = await supabase
          .from('clues')
          .insert({
            ...clue,
            investigation_id: investigationId
          })
          .select()
          .single();

        if (clueError) {
          console.error(`üí• Erreur sauvegarde indice ${clue.name}:`, clueError);
          throw clueError;
        }

        savedClues.push(savedClue);
      }

      // Mettre √† jour l'URL du background
      const { error: updateError } = await supabase
        .from('investigations')
        .update({ background_url: backgroundUrl })
        .eq('id', investigationId);

      if (updateError) {
        console.warn('‚ö†Ô∏è Erreur mise √† jour background URL:', updateError);
      }

      // Cr√©er l'objet Investigation final
      const finalInvestigation: Investigation = {
        id: investigationId,
        title: investigationData.title,
        description: investigationData.description || '',
        context: investigationData.context || '',
        prompt: prompt,
        background_url: backgroundUrl,
        characters: savedCharacters,
        clues: savedClues,
        status: 'en_cours',
        player_role: 'enqu√™teur',
        created_at: new Date().toISOString(),
        accusation_made: false,
        game_result: 'ongoing'
      };

      console.log('üéâ Investigation compl√®te g√©n√©r√©e:', finalInvestigation);
      
      toast.success('Enqu√™te g√©n√©r√©e avec succ√®s !', {
        description: `${savedCharacters.length} personnages et ${savedClues.length} indices cr√©√©s`
      });

      onInvestigationGenerated(finalInvestigation);

    } catch (error) {
      console.error('üí• Erreur g√©n√©ration:', error);
      toast.error('Erreur lors de la g√©n√©ration', {
        description: 'Veuillez r√©essayer dans quelques instants'
      });
    } finally {
      setIsGenerating(false);
      setGenerationStep('');
    }
  };

  return (
    <Card className="max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="text-2xl font-bold flex items-center gap-2">
          <Search className="w-6 h-6 text-gray-500" />
          Cr√©er une enqu√™te
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6">
        <div className="space-y-4">
          <div>
            <label htmlFor="prompt" className="block text-sm font-medium mb-2">
              D√©crivez votre enqu√™te
            </label>
            <Textarea
              id="prompt"
              placeholder="Ex: Un meurtre dans un ch√¢teau lors d'une soir√©e de gala..."
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              className="min-h-[120px]"
              disabled={isGenerating}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Exemples d'enqu√™tes
            </label>
            <div className="flex flex-wrap gap-2">
              {quickPrompts.map((quickPrompt, index) => (
                <Badge
                  key={index}
                  variant="secondary"
                  className="cursor-pointer hover:bg-gray-300 transition-colors"
                  onClick={() => handleQuickPrompt(quickPrompt)}
                >
                  {quickPrompt}
                </Badge>
              ))}
            </div>
          </div>

          <div className="flex gap-4">
            <Button
              onClick={handleGenerate}
              disabled={isGenerating || !prompt.trim()}
              className="flex-1"
              size="lg"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  G√©n√©ration en cours...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 mr-2" />
                  G√©n√©rer l'enqu√™te
                </>
              )}
            </Button>
          </div>

          {generationStep && (
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <p className="text-blue-700 font-medium">{generationStep}</p>
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Card className="bg-green-50/50">
            <CardHeader>
              <CardTitle className="text-sm font-bold flex items-center gap-2">
                <Users className="w-4 h-4 text-green-500" />
                Personnages
              </CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-gray-700">
              Cr√©ez des personnages uniques avec des personnalit√©s complexes et des relations interconnect√©es.
            </CardContent>
          </Card>

          <Card className="bg-orange-50/50">
            <CardHeader>
              <CardTitle className="text-sm font-bold flex items-center gap-2">
                <MapPin className="w-4 h-4 text-orange-500" />
                Indices
              </CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-gray-700">
              G√©n√©rez des indices cach√©s et des myst√®res √† r√©soudre pour guider l'enqu√™te.
            </CardContent>
          </Card>

          <Card className="bg-blue-50/50">
            <CardHeader>
              <CardTitle className="text-sm font-bold flex items-center gap-2">
                <Zap className="w-4 h-4 text-blue-500" />
                IA Avanc√©e
              </CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-gray-700">
              Profitez de l'IA pour cr√©er des sc√©narios complexes et des rebondissements inattendus.
            </CardContent>
          </Card>

          <Card className="bg-red-50/50">
            <CardHeader>
              <CardTitle className="text-sm font-bold flex items-center gap-2">
                <Search className="w-4 h-4 text-red-500" />
                Enqu√™te Unique
              </CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-gray-700">
              Chaque enqu√™te est unique, avec des d√©tails surprenants et des d√©fis stimulants.
            </CardContent>
          </Card>
        </div>
      </CardContent>
    </Card>
  );
};

export default PromptGenerator;
